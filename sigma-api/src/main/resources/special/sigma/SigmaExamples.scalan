package special.sigma {
  import scalan._

  trait SigmaExamples extends Base { self: SigmaExamplesModule =>
    import SigmaProp._;
    import CrowdFunding._;
    import SigmaContract._;
    import Col._;
    import CrossChainAtomicSwap._;
    import InChainAtomicSwap._;
    import CoinEmission._;
    import DemurrageCurrency._;
    trait CrowdFunding extends Def[CrowdFunding] with SigmaContract {
      def deadline: Rep[Long];
      def minToRaise: Rep[Long];
      def backerPubKey: Rep[SigmaProp];
      def projectPubKey: Rep[SigmaProp];
      @clause def canOpen(ctx: Rep[Context]): Rep[Boolean] = CrowdFundingCompanion.this.verifyZK({
        val fundraisingFailure: Rep[SigmaProp] = CrowdFunding.this.sigmaProp(ctx.HEIGHT.>=(CrowdFunding.this.deadline)).&&(CrowdFunding.this.backerPubKey);
        val enoughRaised: Rep[scala.Function1[Box, Boolean]] = fun(((outBox: Rep[Box]) => outBox.value.>=(CrowdFunding.this.minToRaise).&&(outBox.propositionBytes.==(CrowdFunding.this.projectPubKey.propBytes))));
        val fundraisingSuccess: Rep[Boolean] = ctx.HEIGHT.<(CrowdFunding.this.deadline).&&(CrowdFunding.this.projectPubKey.isValid).&&(ctx.OUTPUTS.exists(enoughRaised));
        fundraisingFailure.||(fundraisingSuccess)
      })
    };
    trait CrossChainAtomicSwap extends Def[CrossChainAtomicSwap] with SigmaContract {
      def deadlineBob: Rep[Long];
      def deadlineAlice: Rep[Long];
      def pkA: Rep[SigmaProp];
      def pkB: Rep[SigmaProp];
      def hx: Rep[Col[Byte]];
      def templateForBobChain(ctx: Rep[Context]): Rep[Boolean] = CrossChainAtomicSwapCompanion.this.verifyZK(CrossChainAtomicSwap.this.anyZK(CrossChainAtomicSwap.this.Collection[SigmaProp](CrossChainAtomicSwap.this.sigmaProp(ctx.HEIGHT.>(CrossChainAtomicSwap.this.deadlineBob)).&&(CrossChainAtomicSwap.this.pkA), CrossChainAtomicSwap.this.pkB.&&(CrossChainAtomicSwap.this.blake2b256(ctx.getVar[Col[Byte]](toRep(1.asInstanceOf[Byte]))(((ClassTag.apply[Col[Byte]](toRep(classOf[special.collection.Col].asInstanceOf[Class[Col[Byte]]]))): ClassTag[Col[Byte]])).get).==(CrossChainAtomicSwap.this.hx)))));
      def templateForAliceChain(ctx: Rep[Context]): Rep[Boolean] = CrossChainAtomicSwapCompanion.this.verifyZK({
        val x: Rep[Col[Byte]] = ctx.getVar[Col[Byte]](toRep(1.asInstanceOf[Byte]))(((ClassTag.apply[Col[Byte]](toRep(classOf[special.collection.Col].asInstanceOf[Class[Col[Byte]]]))): ClassTag[Col[Byte]])).get;
        CrossChainAtomicSwap.this.anyZK(CrossChainAtomicSwap.this.Collection[SigmaProp](CrossChainAtomicSwap.this.sigmaProp(ctx.HEIGHT.>(CrossChainAtomicSwap.this.deadlineAlice)).&&(CrossChainAtomicSwap.this.pkB), CrossChainAtomicSwap.this.allZK(CrossChainAtomicSwap.this.Collection[SigmaProp](CrossChainAtomicSwap.this.pkA, CrossChainAtomicSwap.this.sigmaProp(x.length.<(toRep(33.asInstanceOf[Int]))), CrossChainAtomicSwap.this.sigmaProp(CrossChainAtomicSwap.this.blake2b256(x).==(CrossChainAtomicSwap.this.hx))))))
      })
    };
    trait InChainAtomicSwap extends Def[InChainAtomicSwap] with SigmaContract {
      def deadline: Rep[Long];
      def pkA: Rep[SigmaProp];
      def pkB: Rep[SigmaProp];
      def token1: Rep[Col[Byte]];
      def templateForAlice(ctx: Rep[Context]): Rep[Boolean] = InChainAtomicSwapCompanion.this.verifyZK(InChainAtomicSwap.this.pkA.&&(ctx.HEIGHT.>(InChainAtomicSwap.this.deadline)).||({
        val tokenData: Rep[scala.Tuple2[Col[Byte], Long]] = ctx.OUTPUTS.apply(toRep(0.asInstanceOf[Int])).tokens.apply(toRep(0.asInstanceOf[Int]));
        InChainAtomicSwap.this.allOf(InChainAtomicSwap.this.Collection[Boolean](tokenData._1.==(InChainAtomicSwap.this.token1), tokenData._2.>=(toRep(60L.asInstanceOf[Long])), ctx.OUTPUTS.apply(toRep(0.asInstanceOf[Int])).propositionBytes.==(InChainAtomicSwap.this.pkA.propBytes), ctx.OUTPUTS.apply(toRep(0.asInstanceOf[Int])).value.>=(toRep(1L.asInstanceOf[Long]))))
      }));
      def templateForBob(ctx: Rep[Context]): Rep[Boolean] = InChainAtomicSwapCompanion.this.verifyZK(InChainAtomicSwap.this.pkB.&&(ctx.HEIGHT.>(InChainAtomicSwap.this.deadline)).||(InChainAtomicSwap.this.allOf(InChainAtomicSwap.this.Collection[Boolean](ctx.OUTPUTS.apply(toRep(1.asInstanceOf[Int])).value.>=(toRep(100.asInstanceOf[Int])), ctx.OUTPUTS.apply(toRep(1.asInstanceOf[Int])).propositionBytes.==(InChainAtomicSwap.this.pkB.propBytes)))))
    };
    trait CoinEmission extends Def[CoinEmission] with SigmaContract {
      def fixedRatePeriod: Rep[Long];
      def epochLength: Rep[Long];
      def fixedRate: Rep[Long];
      def oneEpochReduction: Rep[Long];
      def templateForTotalAmountBox(ctx: Rep[Context]): Rep[Boolean] = {
        val epoch: Rep[Long] = toRep(1L.asInstanceOf[Long]).+(ctx.HEIGHT.-(CoinEmission.this.fixedRatePeriod)./(CoinEmission.this.epochLength));
        val out: Rep[Box] = ctx.OUTPUTS.apply(toRep(0.asInstanceOf[Int]));
        val coinsToIssue: Rep[Long] = IF(ctx.HEIGHT.<(CoinEmission.this.fixedRatePeriod)).THEN(CoinEmission.this.fixedRate).ELSE(CoinEmission.this.fixedRate.-(CoinEmission.this.oneEpochReduction.*(epoch)));
        val correctCoinsConsumed: Rep[Boolean] = coinsToIssue.==(ctx.SELF.value.-(out.value));
        val sameScriptRule: Rep[Boolean] = ctx.SELF.propositionBytes.==(out.propositionBytes);
        val heightIncreased: Rep[Boolean] = ctx.HEIGHT.>(ctx.SELF.R4[Long](((ClassTag.Long): ClassTag[Long])).get);
        val heightCorrect: Rep[Boolean] = out.R4[Long](((ClassTag.Long): ClassTag[Long])).get.==(ctx.HEIGHT);
        val lastCoins: Rep[Boolean] = ctx.SELF.value.<=(CoinEmission.this.oneEpochReduction);
        CoinEmissionCompanion.this.allOf(CoinEmission.this.Collection[Boolean](correctCoinsConsumed, heightCorrect, heightIncreased, sameScriptRule)).||(heightIncreased.&&(lastCoins))
      }
    };
    trait DemurrageCurrency extends Def[DemurrageCurrency] with SigmaContract {
      def demurragePeriod: Rep[Long];
      def demurrageCost: Rep[Long];
      def regScript: Rep[SigmaProp];
      @clause def canOpen(ctx: Rep[Context]): Rep[Boolean] = DemurrageCurrencyCompanion.this.verifyZK({
        val c2: Rep[Boolean] = ctx.HEIGHT.>=(ctx.SELF.R4[Long](((ClassTag.Long): ClassTag[Long])).get.+(DemurrageCurrency.this.demurragePeriod)).&&(ctx.OUTPUTS.exists(fun(((out: Rep[Box]) => out.value.>=(ctx.SELF.value.-(DemurrageCurrency.this.demurrageCost)).&&(out.propositionBytes.==(ctx.SELF.propositionBytes))))));
        DemurrageCurrency.this.regScript.||(c2)
      })
    };
    trait CrowdFundingCompanion;
    trait CrossChainAtomicSwapCompanion;
    trait InChainAtomicSwapCompanion;
    trait CoinEmissionCompanion;
    trait DemurrageCurrencyCompanion
  }
}