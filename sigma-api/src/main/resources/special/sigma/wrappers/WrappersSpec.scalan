package special.sigma.wrappers {
  import scalan._

  trait WrappersSpec extends Base { self: WrappersSpecModule =>
    import WArray._;
    import WECPoint._;
    import WrapSpec._;
    import WBigInteger._;
    abstract class ECPointWrapSpec extends WrapSpec {
      def getEncoded[A](g: Rep[WECPoint]): Rep[WArray[Byte]] = g.getEncoded(toRep(true.asInstanceOf[Boolean]));
      def exponentiate(l: Rep[WECPoint], r: Rep[WBigInteger]): Rep[WECPoint] = l.multiply(r);
      def groupOp(l: Rep[WECPoint], r: Rep[WECPoint]): Rep[WECPoint] = l.add(r)
    };
    abstract class BigIntegerWrapSpec extends WrapSpec {
      def fromString(s: Rep[String]): Rep[WBigInteger] = RWBigInteger(s);
      def fromArray(sig: Rep[Int], arr: Rep[WArray[Byte]]): Rep[WBigInteger] = RWBigInteger(sig, arr);
      def ZERO: Rep[WBigInteger] = RWBigInteger.ZERO;
      def ONE: Rep[WBigInteger] = RWBigInteger.ONE;
      def valueOf(l: Rep[Long]): Rep[WBigInteger] = RWBigInteger.valueOf(l);
      def toString(l: Rep[WBigInteger], radix: Rep[Int]): Rep[String] = l.toString(radix);
      def toByteArray(l: Rep[WBigInteger]): Rep[WArray[Byte]] = l.toByteArray;
      def add(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.add(r);
      def subtract(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.subtract(r);
      def multiply(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.multiply(r);
      def mod(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.mod(r);
      def modInverse(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.modInverse(r);
      def modPow(l: Rep[WBigInteger], exponent: Rep[WBigInteger], m: Rep[WBigInteger]): Rep[WBigInteger] = l.modPow(exponent, m);
      def remainder(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.remainder(r);
      def divide(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.divide(r);
      def compareTo(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[Int] = l.compareTo(r);
      def min(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.min(r);
      def max(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.max(r);
      def gcd(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.gcd(r);
      def and(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.and(r);
      def or(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.or(r);
      def xor(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.xor(r);
      def not(l: Rep[WBigInteger]): Rep[WBigInteger] = l.not;
      def andNot(l: Rep[WBigInteger], r: Rep[WBigInteger]): Rep[WBigInteger] = l.andNot(r);
      def pow(l: Rep[WBigInteger], r: Rep[Int]): Rep[WBigInteger] = l.pow(r);
      def testBit(l: Rep[WBigInteger], r: Rep[Int]): Rep[Boolean] = l.testBit(r);
      def setBit(l: Rep[WBigInteger], r: Rep[Int]): Rep[WBigInteger] = l.setBit(r);
      def clearBit(l: Rep[WBigInteger], r: Rep[Int]): Rep[WBigInteger] = l.clearBit(r);
      def flitBit(l: Rep[WBigInteger], r: Rep[Int]): Rep[WBigInteger] = l.flipBit(r);
      def getLowestSetBit(l: Rep[WBigInteger]): Rep[Int] = l.getLowestSetBit;
      def bitCount(l: Rep[WBigInteger]): Rep[Int] = l.bitCount;
      def bitLength(l: Rep[WBigInteger]): Rep[Int] = l.bitLength;
      def isProbablyPrime(l: Rep[WBigInteger], r: Rep[Int]): Rep[Boolean] = l.isProbablePrime(r);
      def shiftLeft(l: Rep[WBigInteger], r: Rep[Int]): Rep[WBigInteger] = l.shiftLeft(r);
      def shiftRight(l: Rep[WBigInteger], r: Rep[Int]): Rep[WBigInteger] = l.shiftRight(r);
      def abs(l: Rep[WBigInteger]): Rep[WBigInteger] = l.abs;
      def negate(l: Rep[WBigInteger]): Rep[WBigInteger] = l.negate;
      def signum(l: Rep[WBigInteger]): Rep[Int] = l.signum;
      def byteValue(l: Rep[WBigInteger]): Rep[Byte] = l.byteValue;
      def shortValue(l: Rep[WBigInteger]): Rep[Short] = l.shortValue;
      def intValue(l: Rep[WBigInteger]): Rep[Int] = l.intValue;
      def longValue(l: Rep[WBigInteger]): Rep[Long] = l.longValue;
      def byteValueExact(l: Rep[WBigInteger]): Rep[Byte] = l.byteValueExact;
      def shortValueExact(l: Rep[WBigInteger]): Rep[Short] = l.shortValueExact;
      def intValueExact(l: Rep[WBigInteger]): Rep[Int] = l.intValueExact;
      def longValueExact(l: Rep[WBigInteger]): Rep[Long] = l.longValueExact
    };
    abstract class SigmaPredefWrapSpec extends WrapSpec {
      def dataSize(v: Rep[Any]): Rep[Long] = RWSigmaPredef.dataSize[Any](v)
    };
    trait ECPointWrapSpecCompanion;
    trait BigIntegerWrapSpecCompanion;
    trait SigmaPredefWrapSpecCompanion
  }
}